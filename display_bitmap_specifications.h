/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.0.2.0                                               */
/*  Date (dd.mm.yyyy):  5. 9.2020   Time (hh:mm): 18:56                        */
/*******************************************************************************/


#ifndef _DISPLAY_BITMAP_SPECIFICATIONS_H_
#define _DISPLAY_BITMAP_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define IDC_VERSION_NUMBER_67x67 1
#define IDC_STYLE_SWITCH_67x67 2
#define IDC_ECG_67x67 3
#define IDC_STOPWATCH_67x67 4
#define IDC_Contact_PERSON_67x67 5
#define IDC_QR_CODE_67x67 6
#define IDC_CALL_RECORDS_67x67 7
#define IDC_TAKE_PICTURES_67x67 8
#define IDC_DIAL_67x67 9
#define IDC_BLOOD_OXYGEN_67x67 10
#define IDC_METRONOME_67x67 11
#define IDC_FIND_PHONE_67x67 12
#define IDC_BLOOD_PROESSURE_67x67 13
#define IDC_CENTER_TABLE_67x67 14
#define IDC_RUN_67x67 15
#define IDC_DIMMING_67x67 16
#define IDC_SOS_67x67 17
#define IDC_NEWS_67x67 18
#define IDC_HEART_RATE_67x67 19
#define IDC_THE_WEATHER_67x67 20
#define IDC_SHUTDOWN_67x67 21
#define IDC_MUSIC_67x67 22
#define IDC_SLEEP_67x67 23
#define IDC_RELAX_67x67 24
#define IDC_RESET_67x67 25
#define IDC_NATIONAL_LANGUAGE_67x67 26
#define IDC_INCOMING_CALL_SETTINGS_67x67 27


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID pixelmap_id;
} GX_ICON_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct WINDOW_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW window_canvas;
    GX_ICON_BUTTON window_IDC_VERSION_NUMBER_67x67;
    GX_ICON_BUTTON window_IDC_STYLE_SWITCH_67x67;
    GX_ICON_BUTTON window_IDC_ECG_67x67;
    GX_ICON_BUTTON window_IDC_STOPWATCH_67x67;
    GX_ICON_BUTTON window_IDC_Contact_PERSON_67x67;
    GX_ICON_BUTTON window_IDC_QR_CODE_67x67;
    GX_ICON_BUTTON window_IDC_CALL_RECORDS_67x67;
    GX_ICON_BUTTON window_IDC_TAKE_PICTURES_67x67;
    GX_ICON_BUTTON window_IDC_DIAL_67x67;
    GX_ICON_BUTTON window_IDC_BLOOD_OXYGEN_67x67;
    GX_ICON_BUTTON window_IDC_METRONOME_67x67;
    GX_ICON_BUTTON window_IDC_FIND_PHONE_67x67;
    GX_ICON_BUTTON window_IDC_BLOOD_PROESSURE_67x67;
    GX_ICON_BUTTON window_IDC_CENTER_TABLE_67x67;
    GX_ICON_BUTTON window_IDC_RUN_67x67;
    GX_ICON_BUTTON window_IDC_DIMMING_67x67;
    GX_ICON_BUTTON window_IDC_SOS_67x67;
    GX_ICON_BUTTON window_IDC_NEWS_67x67;
    GX_ICON_BUTTON window_IDC_HEART_RATE_67x67;
    GX_ICON_BUTTON window_IDC_THE_WEATHER_67x67;
    GX_ICON_BUTTON window_IDC_SHUTDOWN_67x67;
    GX_ICON_BUTTON window_IDC_MUSIC_67x67;
    GX_ICON_BUTTON window_IDC_SLEEP_67x67;
    GX_ICON_BUTTON window_IDC_RELAX_67x67;
    GX_ICON_BUTTON window_IDC_RESET_67x67;
    GX_ICON_BUTTON window_IDC_NATIONAL_LANGUAGE_67x67;
    GX_ICON_BUTTON window_IDC_INCOMING_CALL_SETTINGS_67x67;
} WINDOW_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern WINDOW_CONTROL_BLOCK window;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT canvas_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID custom_pixelmap_button_draw(GX_ICON_BUTTON *widget);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_icon_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
